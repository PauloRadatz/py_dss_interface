// CodeGear C++Builder
// Copyright (c) 1995, 2017 by Embarcadero Technologies, Inc.
// All rights reserved
//#include <System.hpp>
//#include <SysInit.hpp>
import "oaidl.idl";
import "ocidl.idl";

//-- user supplied -----------------------------------------------------------

//-- forward type declarations -----------------------------------------------
//-- type declarations -------------------------------------------------------
//-- var, const, procedure ---------------------------------------------------

int __cdecl ActiveClassI(int mode, int arg);
char * __cdecl ActiveClassS(int mode, char * arg);
void __cdecl ActiveClassV(int mode, /* out */ Variant *arg);
int __cdecl BUSI(int mode, int arg);
double __cdecl BUSF(int mode, double arg);
char * __cdecl BUSS(int mode, char * arg);
 void __cdecl BUSV(int mode, /* out */ Variant *arg);
int __cdecl CapacitorsI(int mode, int arg);
double __cdecl CapacitorsF(int mode, double arg);
char * __cdecl CapacitorsS(int mode, char * arg);
 void __cdecl CapacitorsV(int mode, /* out */ Variant *arg);
int __cdecl CapControlsI(int mode, int arg);
double __cdecl CapControlsF(int mode, double arg);
char * __cdecl CapControlsS(int mode, char * arg);
 void __cdecl CapControlsV(int mode, /* out */ Variant *arg);
int __cdecl CircuitI(int mode, int arg);
double __cdecl CircuitF(int mode, double arg1, double arg2);
char * __cdecl CircuitS(int mode, char * arg);
 void __cdecl CircuitV(int mode, /* out */ Variant *arg, int arg2);
int __cdecl CktElementI(int mode, int arg);
double __cdecl CktElementF(int mode, double arg);
char * __cdecl CktElementS(int mode, char * arg);
 void __cdecl CktElementV(int mode, /* out */ Variant *arg);
double __cdecl CmathLibF(int mode, double arg1, double arg2);
 void __cdecl CmathLibV(int mode, double Realpart, double ImagPart, /* out */ Variant *arg);
int __cdecl CtrlQueueI(int mode, int arg);
 void __cdecl CtrlQueueV(int mode, /* out */ Variant *arg);
int __cdecl DSSI(int mode, int arg);
char * __cdecl DSSS(int mode, char * arg);
 void __cdecl DSSV(int mode, /* out */ Variant *arg);
int __cdecl DSSElementI(int mode, int arg);
char * __cdecl DSSElementS(int mode, char * arg);
 void __cdecl DSSElementV(int mode, /* out */ Variant *arg);
int __cdecl DSSExecutiveI(int mode, int arg);
char * __cdecl DSSExecutiveS(int mode, char * arg);
int __cdecl DSSProgressI(int mode, int arg);
char * __cdecl DSSProgressS(int mode, char * arg);
int __cdecl ErrorCode( void);
char * __cdecl ErrorDesc( void);
int __cdecl FusesI(int mode, int arg);
double __cdecl FusesF(int mode, double arg);
char * __cdecl FusesS(int mode, char * arg);
 void __cdecl FusesV(int mode, /* out */ Variant *arg);
int __cdecl GeneratorsI(int mode, int arg);
double __cdecl GeneratorsF(int mode, double arg);
char * __cdecl GeneratorsS(int mode, char * arg);
 void __cdecl GeneratorsV(int mode, /* out */ Variant *arg);
char * __cdecl DSSProperties(int mode, char * arg);
int __cdecl IsourceI(int mode, int arg);
double __cdecl IsourceF(int mode, double arg);
char * __cdecl IsourceS(int mode, char * arg);
 void __cdecl IsourceV(int mode, /* out */ Variant *arg);
int __cdecl LineCodesI(int mode, int arg);
double __cdecl LineCodesF(int mode, double arg);
char * __cdecl LineCodesS(int mode, char * arg);
 void __cdecl LineCodesV(int mode, /* out */ Variant *arg);
int __cdecl LinesI(int mode, int arg);
double __cdecl LinesF(int mode, double arg);
char * __cdecl LinesS(int mode, char * arg);
 void __cdecl LinesV(int mode, /* out */ Variant *arg);
int __cdecl DSSLoads(int mode, int arg);
double __cdecl DSSLoadsF(int mode, double arg);
char * __cdecl DSSLoadsS(int mode, char * arg);
 void __cdecl DSSLoadsV(int mode, /* out */ Variant *arg);
int __cdecl LoadShapeI(int mode, int arg);
double __cdecl LoadShapeF(int mode, double arg);
char * __cdecl LoadShapeS(int mode, char * arg);
 void __cdecl LoadShapeV(int mode, /* out */ Variant *arg);
int __cdecl MetersI(int mode, int arg);
double __cdecl MetersF(int mode, double arg);
char * __cdecl MetersS(int mode, char * arg);
 void __cdecl MetersV(int mode, /* out */ Variant *arg);
int __cdecl MonitorsI(int mode, int arg);
char * __cdecl MonitorsS(int mode, char * arg);
 void __cdecl MonitorsV(int mode, /* out */ Variant *arg);
int __cdecl ParallelI(int mode, int arg);
 void __cdecl ParallelV(int mode, /* out */ Variant *arg);
int __cdecl ParserI(int mode, int arg);
double __cdecl ParserF(int mode, double arg);
char * __cdecl ParserS(int mode, char * arg);
 void __cdecl ParserV(int mode, /* out */ Variant *arg);
int __cdecl PDElementsI(int mode, int arg);
double __cdecl PDElementsF(int mode, double arg);
char * __cdecl PDElementsS(int mode, char * arg);
int __cdecl PVsystemsI(int mode, int arg);
double __cdecl PVsystemsF(int mode, double arg);
char * __cdecl PVsystemsS(int mode, char * arg);
 void __cdecl PVsystemsV(int mode, /* out */ Variant *arg);
int __cdecl ReclosersI(int mode, int arg);
double __cdecl ReclosersF(int mode, double arg);
char * __cdecl ReclosersS(int mode, char * arg);
 void __cdecl ReclosersV(int mode, /* out */ Variant *arg);
int __cdecl RegControlsI(int mode, int arg);
double __cdecl RegControlsF(int mode, double arg);
char * __cdecl RegControlsS(int mode, char * arg);
 void __cdecl RegControlsV(int mode, /* out */ Variant *arg);
int __cdecl RelaysI(int mode, int arg);
char * __cdecl RelaysS(int mode, char * arg);
 void __cdecl RelaysV(int mode, /* out */ Variant *arg);
int __cdecl SensorsI(int mode, int arg);
double __cdecl SensorsF(int mode, double arg);
char * __cdecl SensorsS(int mode, char * arg);
 void __cdecl SensorsV(int mode, /* out */ Variant *arg);
int __cdecl SettingsI(int mode, int arg);
double __cdecl SettingsF(int mode, double arg);
char * __cdecl SettingsS(int mode, char * arg);
 void __cdecl SettingsV(int mode, /* out */ Variant *arg);
int __cdecl SolutionI(int mode, int arg);
double __cdecl SolutionF(int mode, double arg);
char * __cdecl SolutionS(int mode, char * arg);
 void __cdecl SolutionV(int mode, /* out */ Variant *arg);
int __cdecl SwtControlsI(int mode, int arg);
double __cdecl SwtControlsF(int mode, double arg);
char * __cdecl SwtControlsS(int mode, char * arg);
 void __cdecl SwtControlsV(int mode, /* out */ Variant *arg);
char * __cdecl DSSPut_Command(char * a);
int __cdecl TopologyI(int mode, int arg);
char * __cdecl TopologyS(int mode, char * arg);
 void __cdecl TopologyV(int mode, /* out */ Variant *arg);
int __cdecl TransformersI(int mode, int arg);
double __cdecl TransformersF(int mode, double arg);
char * __cdecl TransformersS(int mode, char * arg);
 void __cdecl TransformersV(int mode, /* out */ Variant *arg);
int __cdecl VsourcesI(int mode, int arg);
double __cdecl VsourcesF(int mode, double arg);
char * __cdecl VsourcesS(int mode, char * arg);
 void __cdecl VsourcesV(int mode, /* out */ Variant *arg);
int __cdecl XYCurvesI(int mode, int arg);
double __cdecl XYCurvesF(int mode, double arg);
char * __cdecl XYCurvesS(int mode, char * arg);
 void __cdecl XYCurvesV(int mode, VARIANT *arg);
unsigned __cdecl InitAndGetYparams(NativeUInt &hY, unsigned &nBus, unsigned &nNZ);
 void __cdecl GetCompressedYMatrix(NativeUInt hY, unsigned nBus, unsigned nNz, pIntegerArray &ColPtr, pIntegerArray &RowIdx, pComplexArray &cVals);
 void __cdecl ZeroInjCurr( void);
 void __cdecl GetSourceInjCurrents( void);
 void __cdecl GetPCInjCurr( void);
int __cdecl SystemYChanged(int mode, int arg);
 void __cdecl BuildYMatrixD(int BuildOps, int AllocateVI);
int __cdecl UseAuxCurrents(int mode, int arg);
 void __cdecl AddInAuxCurrents(int SType);
 void __cdecl getIpointer(pNodeVarray &IvectorPtr);
 void __cdecl getVpointer(pNodeVarray &VvectorPtr);
int __cdecl SolveSystem(pNodeVarray &NodeV);
