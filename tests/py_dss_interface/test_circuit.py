# -*- coding: utf-8 -*-
# @Time    : 6/4/2021 7:51 AM
# @Author  : Paulo Radatz
# @Email   : paulo.radatz@gmail.com
# @File    : test_circuit.py
# @Software: PyCharm

import platform
import pytest


class TestCircuit13Bus:

    @pytest.fixture(autouse=True)
    def _request(self, solve_snap_13bus):
        self.dss = solve_snap_13bus

    def test_circuit_num_ckt_elements(self):
        expected = 39
        actual = self.dss.circuit_num_ckt_elements()
        assert actual == expected

    def test_circuit_num_buses(self):
        expected = 16
        actual = self.dss.circuit_num_buses()
        assert actual == expected

    def test_circuit_num_nodes(self):
        expected = 41
        actual = self.dss.circuit_num_nodes()
        assert actual == expected

    def test_circuit_first_pc_element(self):
        expected = 1
        actual = self.dss.circuit_first_pc_element()
        assert actual == expected

        expected = 'Load.671'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_next_pc_element(self):
        expected = 3
        self.dss.circuit_first_pc_element()
        self.dss.circuit_next_pc_element()
        actual = self.dss.circuit_next_pc_element()
        assert actual == expected

        expected = "Load.634b"
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_first_pd_element(self):
        expected = 1
        actual = self.dss.circuit_first_pd_element()
        assert actual == expected

        expected = 'Transformer.sub'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_next_pd_element(self):
        expected = 3
        self.dss.circuit_first_pd_element()
        self.dss.circuit_next_pd_element()
        actual = self.dss.circuit_next_pd_element()
        assert actual == expected

        expected = "Transformer.reg2"
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_sample(self):
        expected = 0
        actual = self.dss.circuit_sample()
        assert actual == expected

    def test_circuit_save_sample(self):
        expected = 0
        actual = self.dss.circuit_save_sample()
        assert actual == expected

    def test_circuit_set_active_bus_i(self):
        expected = 0
        actual = self.dss.circuit_set_active_bus_i(1)
        assert actual == expected

        expected = '650'
        actual = self.dss.bus_name()
        assert actual == expected

    def test_circuit_first_element(self):
        expected = 1
        actual = self.dss.circuit_first_element()
        assert actual == expected

        expected = 'Line.650632'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_next_element(self):
        expected = 2
        self.dss.circuit_first_element()
        actual = self.dss.circuit_next_element()
        assert actual == expected

        expected = 'Line.632670'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_update_storage_t(self):
        expected = 0
        actual = self.dss.circuit_update_storage_t()
        assert actual == expected

    def test_circuit_parent_pd_element(self):
        expected = 1
        self.dss.circuit_first_element()
        self.dss.circuit_next_element()
        actual = self.dss.circuit_parent_pd_element()
        assert actual == expected

        expected = 'Line.650632'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_circuit_end_of_time_step_update(self):
        expected = 0
        actual = self.dss.circuit_end_of_time_step_update()
        assert actual == expected

    def test_circuit_name(self):
        expected = 'ieee13nodeckt'
        actual = self.dss.circuit_name()
        assert actual == expected

    def test_circuit_disable(self):
        pass

    def test_circuit_enable(self):
        pass

    def test_circuit_set_active_element(self):
        expected = '26'
        actual = self.dss.circuit_set_active_element("Line.650632")
        assert actual == expected

        expected = 'Line.650632'
        actual = self.dss.cktelement_name()
        assert actual == expected

    def test_active_class_get_name(self):
        expected = '650632'
        self.dss.circuit_set_active_element("Line.650632")
        actual = self.dss.active_class_get_name()
        assert actual == expected

    def test_circuit_set_active_bus(self):
        expected = '8'
        actual = self.dss.circuit_set_active_bus("692")
        assert actual == expected

        expected = '692'
        actual = self.dss.bus_name()
        assert actual == expected

    def test_circuit_set_active_class(self):
        # Not sure how to use it
        expected = '23'
        actual = self.dss.circuit_set_active_class("Capacitor")
        assert actual == expected

    def test_circuit_losses(self):
        if platform.architecture()[0] == "64bit":
            expected = [112408.53740410128, 327911.6070437507]
            actual = self.dss.circuit_losses()
            assert [round(value, 5) for value in actual] == [round(value, 5) for value in expected]

    def test_circuit_line_losses(self):
        if platform.architecture()[0] == "64bit":
            expected = [106.50104684552127, 317.225075181265]
            actual = self.dss.circuit_line_losses()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_substation_losses(self):
        expected = [0.0, 0.0]
        actual = self.dss.circuit_substation_losses()
        assert actual == expected

    def test_circuit_total_power(self):
        if platform.architecture()[0] == "64bit":
            expected = [-3567.2130572232213, -1736.5876246039768]
            actual = self.dss.circuit_total_power()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_bus_volts(self):
        if platform.architecture()[0] == "64bit":
            expected = [57502.68619173074, 33189.47560805491, -10.988873472977797, -66394.8688498055,
                        -57491.69731825776,
                        33205.39325470909, 2401.5627723087614, -0.4669003619615109, -1201.2376783493821,
                        -2079.717511753303,
                        -1200.3116004255198, 2080.1419385890968, 2536.35611735117, -0.5793274158644572,
                        -1246.2598761513093,
                        -2157.487712670567, -1267.587768293624, 2196.9355364350686, 2426.4227635494685,
                        -109.96859964562823,
                        -1300.0193437263497, -2096.284412787372, -1120.4211783202531, 2128.6024323393126,
                        273.12043190753747, -15.65361248526227, -149.22103967628902, -236.2879586961411,
                        -124.73842715841117, 242.00723011013307, 2350.072713273249, -221.08573964636037,
                        -1338.4057884569047, -2109.79926873945, -1015.4001153916768, 2083.1115246837253,
                        -1295.6861264459185, -2078.366153237622, -1122.3854662972226, 2129.5595912569565,
                        -1296.2432698471687, -2073.159564606236, -1121.7870803503154, 2124.35121609006,
                        -1015.4001096022041,
                        2083.111507606075, 2350.0726913632457, -221.08573234457813, -1338.4057922959519,
                        -2109.7992630653525, 2333.4937833387567, -229.76132301856717, -1347.983697350853,
                        -2110.4122812917276, -1013.9611656277061, 2078.643995579598, -1002.1192290632007,
                        2078.749054076744,
                        2332.4226357124753, -217.315297134126, 2407.0510353037284, -145.37621811101252,
                        -1312.3022035419074,
                        -2102.3714370042235, -1082.9954874709558, 2116.1047513838116, 2433.8469441691063,
                        -107.52581738463108, -1300.7631166862307, -2101.2693421622225, -1123.561604742316,
                        2134.13662275953,
                        2350.07274187478, -221.085757156994, -1338.405811708883, -2109.799296204432,
                        -1015.4001197194411,
                        2083.111559417907, 2345.3836609834, -221.6058883507038, -1009.5621391710984, 2080.528335732233]
            actual = self.dss.circuit_all_bus_volts()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_bus_vmag(self):
        if platform.architecture()[0] == "64bit":
            expected = [66393.52536507105, 66394.86975917802, 66391.9679007487, 2401.56281769503, 2401.707078013379,
                        2401.6116303002195, 2536.356183513064, 2491.569166053624, 2536.395967032524, 2428.9134443983507,
                        2466.669542796113, 2405.4712494206583, 273.5686493536834, 279.4618365839277, 272.26306145992913,
                        2360.449250025611, 2498.5161614343156, 2317.4104122074677, 2449.1648383047186,
                        2407.2335133239008,
                        2445.0433932636856, 2402.3476732030695, 2317.410394319708, 2360.4492275280204,
                        2498.516158699491,
                        2344.7779217733746, 2504.1765204055864, 2312.764169940423, 2307.6916126474052,
                        2342.5245548237963,
                        2411.437109142391, 2478.3265992504193, 2377.1366272706323, 2436.220997579146, 2471.298754509891,
                        2411.831213881805, 2360.449280141501, 2498.516197081946, 2317.410445326153, 2355.829723676905,
                        2312.5340794532]
            actual = self.dss.circuit_all_bus_vmag()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_element_names(self):
        expected = ['Vsource.source', 'Transformer.sub', 'Transformer.reg1', 'RegControl.reg1', 'Transformer.reg2',
                    'RegControl.reg2', 'Transformer.reg3', 'RegControl.reg3', 'Transformer.xfm1', 'Load.671',
                    'Load.634a', 'Load.634b', 'Load.634c', 'Load.645', 'Load.646', 'Load.692', 'Load.675a', 'Load.675b',
                    'Load.675c', 'Load.611', 'Load.652', 'Load.670a', 'Load.670b', 'Load.670c', 'Capacitor.cap1',
                    'Capacitor.cap2', 'Line.650632', 'Line.632670', 'Line.670671', 'Line.671680', 'Line.632633',
                    'Line.632645', 'Line.645646', 'Line.692675', 'Line.671684', 'Line.684611', 'Line.684652',
                    'EnergyMeter.em1', 'Line.671692']
        actual = self.dss.circuit_all_element_names()
        assert actual == expected

    def test_circuit_all_bus_names(self):
        expected = ['sourcebus', '650', 'rg60', '633', '634', '671', '645', '646', '692', '675', '611', '652', '670',
                    '632', '680', '684']
        actual = self.dss.circuit_all_bus_names()
        assert actual == expected

    def test_circuit_all_element_losses(self):
        if platform.architecture()[0] == "64bit":
            expected = [-3567.2130572232213, -1736.5876246039768, 0.032287911406718196, 0.26246956013666933,
                        0.12209431781549938, 0.12385874599497766, 0.0, 0.0, 0.06534584204095882, 0.06707780466409168,
                        0.0,
                        0.0, 0.13508999156020582, 0.13685448115179316, 0.0, 0.0, 5.552672495756633, 10.09627127053823,
                        1155.0138985144563, 660.0382388082895, 160.00037793084016, 110.00734287426086,
                        119.99921548166647,
                        89.99779375162575, 120.00422637632467, 90.00659856144686, 169.99904036264297,
                        124.99723388403005,
                        234.56736460810578, 134.62641475903627, 166.67363250258813, 148.05286127890344,
                        485.00362643749804,
                        190.02832412730436, 67.99940565100636, 59.998096116691535, 290.0145551032838,
                        212.02259924297505,
                        163.45924282632623, 76.92782718009413, 121.9362083812026, 81.93411617144581, 16.999947149386877,
                        10.00069897109282, 65.99949886980545, 37.99886583778652, 117.00423409948664, 68.00542640529191,
                        0.0,
                        -593.4874833653861, 0.0, -92.45556560908302, 60.737637029950974, 196.01567705773493,
                        12.990632827557624, 41.49451007814577, 22.728759388257167, 72.3341461004547,
                        1.3970495798327352e-11,
                        -0.004169230139508104, 0.8244872480827762, 1.0561418762530956, 2.7673617080022814,
                        2.4007733405815963, 0.5274850329600449, 0.4197458963507816, 4.162956819155021,
                        2.419341544324343,
                        0.5794873845105758, 0.47068039939882145, 0.3824044325920986, 0.3873491768157692,
                        0.7998259198180458,
                        0.23087894134466477, 0.0, 0.0, 9.054620692040771e-06, 2.9103830456733704e-14]
            actual = self.dss.circuit_all_element_losses()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_bus_vmag_pu(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.9999735584862265, 0.9999938068244758, 0.9999501010311197, 0.9999107735134771,
                        0.9999708375040773,
                        0.9999310970500729, 1.0560331192154129, 1.0373856697540609, 1.0560496834166169,
                        1.0112984357896795,
                        1.0270185032705674, 1.0015380817650883, 0.9871558334136964, 1.0084210411247365,
                        0.9824446989017606,
                        0.9827927956087044, 1.0402781094077398, 0.964873215368382, 1.019730273090141, 1.002271815086425,
                        1.0180142749623353, 1.0002375546712956, 0.9648732079206634, 0.9827927862416442,
                        1.0402781082690726,
                        0.9762679069656844, 1.042634847226807, 0.9629387135244408, 0.9608267118523709,
                        0.9753296987818464,
                        1.0040220173777974, 1.0318720162622879, 0.9897407247513595, 1.0143409967002923,
                        1.028945914301158,
                        1.0041861061836073, 0.9827928081477071, 1.0402781242499288, 0.9648732291576237,
                        0.9808694171609009,
                        0.9628429134248714]
            actual = self.dss.circuit_all_bus_vmag_pu()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_node_names(self):
        expected = ['sourcebus.1', 'sourcebus.2', 'sourcebus.3', '650.1', '650.2', '650.3', 'rg60.1', 'rg60.2',
                    'rg60.3', '633.1', '633.2', '633.3', '634.1', '634.2', '634.3', '671.1', '671.2', '671.3', '645.2',
                    '645.3', '646.2', '646.3', '692.3', '692.1', '692.2', '675.1', '675.2', '675.3', '611.3', '652.1',
                    '670.1', '670.2', '670.3', '632.1', '632.2', '632.3', '680.1', '680.2', '680.3', '684.1', '684.3']
        actual = self.dss.circuit_all_node_names()
        assert actual == expected

    def test_circuit_system_y(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.8178822742754986, -4.636999108384914, -0.13055025449836521, 1.4833269062112926,
                        -0.13055025449836524, 1.4833269062112926, -9.283352668986776, 74.26682135189421,
                        9.283352668986776,
                        -74.26682135189421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -0.13055025449836521, 1.4833269062112926, 0.8178822742754985, -4.636999108384914,
                        -0.13055025449836524, 1.4833269062112926, 0.0, 0.0, -9.283352668986776, 74.26682135189421,
                        9.283352668986776, -74.26682135189421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -0.13055025449836524, 1.4833269062112926, -0.13055025449836524, 1.4833269062112926,
                        0.8178822742754985, -4.636999108384913, 9.283352668986776, -74.26682135189421, 0.0, 0.0,
                        -9.283352668986776, 74.26682135189421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -9.283352668986776, 74.26682135189421, 0.0, 0.0, 9.283352668986776, -74.26682135189421,
                        1890.6787348910132, -5002.165990528294, 0.0, 0.0, 0.0, 0.0, -1369.165023011177,
                        1369.165023011177,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.283352668986776, -74.26682135189421,
                        -9.283352668986776,
                        74.26682135189421, 0.0, 0.0, 0.0, 0.0, 1890.6787348910132, -5002.165990528294, 0.0, 0.0, 0.0,
                        0.0,
                        -1393.9089692101743, 1393.9089692101743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        9.283352668986776,
                        -74.26682135189421, -9.283352668986776, 74.26682135189421, 0.0, 0.0, 0.0, 0.0,
                        1890.6787348910132,
                        -5002.165990528294, 0.0, 0.0, 0.0, 0.0, -1369.165023011177, 1369.165023011177, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1369.165023011177, 1369.165023011177, 0.0, 0.0, 0.0, 0.0,
                        1297.3960001040548, -1299.5514197956009, -0.48584426251815294, 1.2202578674652254,
                        -0.2660516357083827, 0.9121918679463129, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.145090744360685,
                        3.3005104912135703,
                        0.48584426251815294, -1.2202579103062965, 0.2660516357083827, -0.912191910787384, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1393.9089692101743, 1393.9089692101743, 0.0, 0.0, -0.48584426251815294, 1.2202578674652254,
                        1344.5294010775478, -1346.6542769201053, -0.12630137793675839, 0.6966811885852322, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.48584426251815294, -1.2202579103062965, -1.0026837665363062, 3.127559664400728,
                        0.12630137793675839, -0.6966812314263033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1369.165023011177,
                        1369.165023011177, -0.2660516357083827, 0.9121918679463129, -0.12630137793675839,
                        0.6966811885852322, 1297.1376035523654, -1299.201422392409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.2660516357083827,
                        -0.912191910787384, 0.12630137793675839, -0.6966812314263033, -0.886694192671301,
                        2.950513088021902,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.17448228372582,
                        -8.242736155055436,
                        -1.495114717049371, 1.5058679382212923, -2.1394214811205607, 1.6900708859940965,
                        -5.286769772134453,
                        9.612308676608098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -5.564470386941076, 7.1336236509818685, 1.495114717049371, -1.50586794893156,
                        2.1394214811205607,
                        -1.6900708967043643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.495114717049371,
                        1.5058679382212923, 5.518419074829101, -8.172341890231122, -1.0879942589622877,
                        1.3823589025648546,
                        0.0, 0.0, -5.286769772134453, 9.612308676608098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 1.495114717049371, -1.50586794893156, -4.9084071780443566,
                        7.063229386157554,
                        1.0879942589622877, -1.3823589132751224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -2.1394214811205607, 1.6900708859940965, -1.0879942589622877, 1.3823589025648546,
                        5.799073706329776,
                        -8.194532177879086, 0.0, 0.0, 0.0, 0.0, -5.286769772134453, 9.612308676608098, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1394214811205607, -1.6900708967043643,
                        1.0879942589622877,
                        -1.3823589132751224, -5.189061809545032, 7.085419673805519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, -5.286769772134453, 9.612308676608098, 0.0, 0.0, 0.0, 0.0,
                        47.90393247228869,
                        -84.7402932980703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -5.286769772134453, 9.612308676608098, 0.0, 0.0, 0.0, 0.0, 47.38261719384117,
                        -84.47963565884653,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -5.286769772134453,
                        9.612308676608098, 0.0, 0.0, 0.0, 0.0, 47.38261719384117, -84.47963565884653, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        10000011.227613583, -18.253689515693477, -1.7228842898470091, 4.284072995171074,
                        -3.361195344943604,
                        4.205041811153174, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7180656329492654, 4.9520037377547945, 0.7289486309349635,
                        -1.8308445766035961, 0.3991772478745428, -1.3686300236869977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.29018148872137, 6.601020982427141, 0.9716885250363059, -2.440515820612593,
                        0.5321032714167654,
                        -1.824383821574768, 0.0, 0.0, 0.0, 0.0, -7.174872193248206, 6.675239762854815,
                        2.407667691776556,
                        -0.9993153743626844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7228842898470091,
                        4.284072995171074, 10000003.55426355, -10.973057016204216, -0.4643493315148357,
                        2.451358228738929,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.7289486309349635, -1.8308445766035961, -1.5044017502420202, 4.692512624757282,
                        0.18949944176557929, -1.045283167931438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9716885250363059,
                        -2.440515820612593, -2.0053675330726124, 6.255119328801456, 0.25260275587351677,
                        -1.3933624628526067, 0.0, 0.0, -10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, -3.361195344943604, 4.205041811153174, -0.4643493315148357,
                        2.451358228738929,
                        10000010.37299707, -16.998089327111956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10000000.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3991772478745428, -1.3686300236869977,
                        0.18949944176557929, -1.045283167931438, -1.3303738824775715, 4.426876351120633, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.5321032714167654, -1.824383821574768, 0.25260275587351677, -1.3933624628526067,
                        -1.773388385342602, 5.901026176043804, 0.0, 0.0, 0.0, 0.0, 2.407667691776556,
                        -0.9993153743626844,
                        -7.224740534769255, 6.644761767290793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 11.5890987445197, -10.653320136584156, -7.224740534769255,
                        6.644761767290793,
                        2.407667691776556, -0.9993153743626844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.334844320861555, 3.9868570603744753,
                        1.4446006150659336, -0.5995892246176102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.8522683068424897,
                        1.598904581843866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.224740534769255, 6.644761767290793, 7.238031030331386,
                        -6.652389326059439, -2.420958187338686, 1.00694295669392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 2.407667691776556, -0.9993153743626844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.407667691776556,
                        -0.9993153743626844, -2.420958187338686, 1.00694295669392, 7.188162688810336,
                        -6.682867321623462,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.174872193248206,
                        6.675239762854815,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10000010.422306094, -7.845072237930875,
                        -1.0907451909438017, 2.501251464991075, 1.080921781180488, -2.49252596573072, 2.428535277137064,
                        -3.079311097832396, -10.412482684253028, 7.8363535923136745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.428535277137064,
                        3.079311097832396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0907451909438017,
                        2.501251464991075, 10000010.422306094, -7.845072237930877, -10.412482684253026,
                        7.836353592313676,
                        2.4285352771370636, -3.079311097832397, 1.080921781180488, -2.49252596573072, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -2.4285352771370636, 3.079311097832397, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.080921781180488,
                        -2.49252596573072, -10.412482684253026, 7.836353592313676, 10.496684073141916,
                        -7.8346619917934675,
                        -2.4285352771370636, 3.079311097832397, -1.080921781180488, 2.49252596573072, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        2.4285352771370636, -3.079311097832397, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.428535277137064,
                        -3.079311097832396, 2.4285352771370636, -3.079311097832397, -2.4285352771370636,
                        3.079311097832397,
                        11.558235021022526, -8.172954229715511, -2.428535277137064, 3.079311097832396, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -11.54642946546697, 8.197215274680165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10.412482684253028,
                        7.8363535923136745, 1.080921781180488, -2.49252596573072, -1.080921781180488, 2.49252596573072,
                        -2.428535277137064, 3.079311097832396, 10.46282990647525, -7.83848143623791, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        2.428535277137064, -3.079311097832396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 6.559337128485902, -6.61625150294775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -6.529823239597013, 6.619723755158723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 4.313194834445097, -1.652684982082156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.290972612222875,
                        1.637761166855122,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7180656329492654,
                        4.9520037377547945,
                        0.7289486309349635, -1.8308445766035961, 0.3991772478745428, -1.3686300236869977, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.1545724771925325, -14.850322830990592, -2.185753016296743, 5.489788792552021,
                        -1.1969332769851344,
                        4.103838109143928, -3.4335554553543783, 9.896583182049687, 1.4568043853617796,
                        -3.6589442587894965,
                        0.7977560291105917, -2.7352081282980016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7289486309349635,
                        -1.8308445766035961,
                        -1.5044017502420202, 4.692512624757282, 0.18949944176557929, -1.045283167931438, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.185753016296743,
                        5.489788792552021, 4.522408109171476, -14.07709964525759, -0.5682142181876438,
                        3.1342823197719367,
                        1.4568043853617796, -3.6589442587894965, -3.006548025596122, 9.377989998203086,
                        0.3787147764220645,
                        -2.08899919468157, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3991772478745428, -1.3686300236869977,
                        0.18949944176557929, -1.045283167931438, -1.3303738824775715, 4.426876351120633, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.1969332769851344,
                        4.103838109143928, -0.5682142181876438, 3.1342823197719367, 4.009439583890767,
                        -13.285797412963788,
                        0.7977560291105917, -2.7352081282980016, 0.3787147764220645, -2.08899919468157,
                        -2.658753201413196,
                        8.847115706212598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.145090744360685, 3.3005104912135703,
                        0.48584426251815294, -1.2202579103062965, 0.2660516357083827, -0.912191910787384,
                        -5.564470386941076, 7.1336236509818685, 1.495114717049371, -1.50586794893156,
                        2.1394214811205607,
                        -1.6900708967043643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -3.4335554553543783,
                        9.896583182049687, 1.4568043853617796, -3.6589442587894965, 0.7977560291105917,
                        -2.7352081282980016,
                        10.143116586656138, -20.33071700766389, -3.4377633649293036, 6.385070050188516,
                        -3.2032291459395354,
                        5.3374708679509135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48584426251815294, -1.2202579103062965,
                        -1.0026837665363062, 3.127559664400728, 0.12630137793675839, -0.6966812314263033,
                        1.495114717049371,
                        -1.50586794893156, -4.9084071780443566, 7.063229386157554, 1.0879942589622877,
                        -1.3823589132751224,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.334844320861555,
                        3.9868570603744753,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        1.4568043853617796, -3.6589442587894965, -3.006548025596122, 9.377989998203086,
                        0.3787147764220645,
                        -2.08899919468157, -3.4377633649293036, 6.385070050188516, 13.25248329103834,
                        -23.55563574257336,
                        -3.0376110283870443, 4.767628485451501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4446006150659336,
                        -0.5995892246176102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.2660516357083827, -0.912191910787384, 0.12630137793675839, -0.6966812314263033,
                        -0.886694192671301, 2.950513088021902, 2.1394214811205607, -1.6900708967043643,
                        1.0879942589622877,
                        -1.3823589132751224, -5.189061809545032, 7.085419673805519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 1.4446006150659336, -0.5995892246176102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7977560291105917, -2.7352081282980016,
                        0.3787147764220645, -2.08899919468157, -2.658753201413196, 8.847115706212598,
                        -3.2032291459395354,
                        5.3374708679509135, -3.0376110283870443, 4.767628485451501, 13.039432519578451,
                        -22.888191959190422,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.3049233159489235, 4.005143857712889, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.29018148872137, 6.601020982427141,
                        0.9716885250363059, -2.440515820612593, 0.5321032714167654, -1.824383821574768, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.29018148872137, -6.601020882464641,
                        -0.9716885250363059,
                        2.4405157991920574, -0.5321032714167654, 1.8243838001542325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9716885250363059, -2.440515820612593,
                        -2.0053675330726124, 6.255119328801456, 0.25260275587351677, -1.3933624628526067, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9716885250363059, 2.4405157991920574,
                        2.0053675330726124, -6.255119228838956, -0.25260275587351677, 1.393362441432071, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5321032714167654,
                        -1.824383821574768, 0.25260275587351677, -1.3933624628526067, -1.773388385342602,
                        5.901026176043804,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5321032714167654,
                        1.8243838001542325,
                        -0.25260275587351677, 1.393362441432071, 1.773388385342602, -5.901026076081305, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        -3.8522683068424897, 1.598904581843866, 2.407667691776556, -0.9993153743626844,
                        -7.174872193248206,
                        6.675239762854815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4446006150659336, -0.5995892246176102, -4.3049233159489235,
                        4.005143857712889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.479795509197128, -10.680383540597704, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10000000.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428535277137064, 3.079311097832396,
                        -2.4285352771370636,
                        3.079311097832397, 2.4285352771370636, -3.079311097832397, -11.54642946546697,
                        8.197215274680165,
                        2.428535277137064, -3.079311097832396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10000011.546429465,
                        -8.19720842103701,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.174872193248206,
                        6.675239762854815, 0.0, 0.0, 2.407667691776556, -0.9993153743626844, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.290972612222875,
                        1.637761166855122,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 11.46584480547108, -8.312994159392666, -2.407667691776556, 0.9993153679365236, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.407667691776556, -0.9993153743626844, 0.0, 0.0,
                        -7.224740534769255, 6.644761767290793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, -6.529823239597013, 6.619723755158723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.407667691776556,
                        0.9993153679365236, 13.754563774366268, -13.264485462472015]
            actual = self.dss.circuit_system_y()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_bus_distances(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.0, 0.0, 0.0, 0.762, 0.762, 1.2192, 0.762, 0.85344, 1.2202, 1.3726, 1.40208, 1.55448, 0.8129016,
                        0.6096, 1.524, 1.31064]
            actual = self.dss.circuit_all_bus_distances()
            assert actual == expected

    def test_circuit_all_node_distances(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.762, 0.762, 0.762, 0.762, 0.762, 0.762, 1.2192,
                        1.2192, 1.2192, 0.762, 0.762, 0.85344, 0.85344, 1.2202, 1.2202, 1.2202, 1.3726, 1.3726, 1.3726,
                        1.40208, 1.55448, 0.8129016, 0.8129016, 0.8129016, 0.6096, 0.6096, 0.6096, 1.524, 1.524, 1.524,
                        1.31064, 1.31064]
            actual = self.dss.circuit_all_node_distances()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_node_vmag_by_phase(self):
        if platform.architecture()[0] == "64bit":
            expected = [66394.86975917802, 2401.707078013379, 2491.569166053624, 2466.669542796113, 279.4618365839277,
                        2498.5161614343156, 2449.1648383047186, 2445.0433932636856, 2498.516158699491,
                        2504.1765204055864,
                        2478.3265992504193, 2471.298754509891, 2498.516197081946]
            actual = self.dss.circuit_all_node_vmag_by_phase(2)
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_node_vmag_pu_by_phase(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.9999938068244758, 0.9999708375040773, 1.0373856697540609, 1.0270185032705674,
                        1.0084210411247365,
                        1.0402781094077398, 1.019730273090141, 1.0180142749623353, 1.0402781082690726,
                        1.042634847226807,
                        1.0318720162622879, 1.028945914301158, 1.0402781242499288]
            actual = self.dss.circuit_all_node_vmag_pu_by_phase(2)
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_node_distances_by_phase(self):
        if platform.architecture()[0] == "64bit":
            expected = [0.0, 0.0, 0.0, 0.762, 0.762, 1.2192, 0.762, 0.85344, 1.2202, 1.3726, 1.40208, 0.8129016, 0.6096,
                        1.524, 1.31064]
            actual = self.dss.circuit_all_node_distances_by_phase(3)
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_all_node_names_by_phase(self):
        expected = ['sourcebus.0', '650.0', 'rg60.0', '633.0', '634.0', '671.0', '645.0', '646.0', '692.0', '675.0',
                    '670.0', '632.0', '680.0']
        actual = self.dss.circuit_all_node_names_by_phase(2)
        assert actual == expected

    def test_circuit_y_node_varray(self):
        if platform.architecture()[0] == "64bit":
            expected = [57502.68619173074, 33189.47560805491, -10.988873472977797, -66394.8688498055,
                        -57491.69731825776,
                        33205.39325470909, 2401.5627723087614, -0.4669003619615109, -1201.2376783493821,
                        -2079.717511753303,
                        -1200.3116004255198, 2080.1419385890968, 2536.35611735117, -0.5793274158644572,
                        -1246.2598761513093,
                        -2157.487712670567, -1267.587768293624, 2196.9355364350686, 2426.4227635494685,
                        -109.96859964562823,
                        -1300.0193437263497, -2096.284412787372, -1120.4211783202531, 2128.6024323393126,
                        273.12043190753747, -15.65361248526227, -149.22103967628902, -236.2879586961411,
                        -124.73842715841117, 242.00723011013307, 2350.072713273249, -221.08573964636037,
                        -1338.4057884569047, -2109.79926873945, -1015.4001153916768, 2083.1115246837253,
                        -1295.6861264459185, -2078.366153237622, -1296.2432698471687, -2073.159564606236,
                        -1121.7870803503154, 2124.35121609006, -1015.4001096022041, 2083.111507606075,
                        2350.0726913632457,
                        -221.08573234457813, 2333.4937833387567, -229.76132301856717, -1347.983697350853,
                        -2110.4122812917276, -1013.9611656277061, 2078.643995579598, -1002.1192290632007,
                        2078.749054076744,
                        2332.4226357124753, -217.315297134126, 2407.0510353037284, -145.37621811101252,
                        -1312.3022035419074,
                        -2102.3714370042235, -1082.9954874709558, 2116.1047513838116, 2433.8469441691063,
                        -107.52581738463108, -1300.7631166862307, -2101.2693421622225, -1123.561604742316,
                        2134.13662275953,
                        2350.07274187478, -221.085757156994, -1338.405811708883, -2109.799296204432,
                        -1015.4001197194411,
                        2083.111559417907, -1122.3854662972226, 2129.5595912569565, -1338.4057922959519,
                        -2109.7992630653525, 2345.3836609834, -221.6058883507038, -1009.5621391710984,
                        2080.528335732233]
            actual = self.dss.circuit_y_node_varray()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]

    def test_circuit_y_node_order(self):
        expected = ['SOURCEBUS.1', 'SOURCEBUS.2', 'SOURCEBUS.3', '650.1', '650.2', '650.3', 'RG60.1', 'RG60.2',
                    'RG60.3', '633.1', '633.2', '633.3', '634.1', '634.2', '634.3', '671.1', '671.2', '671.3', '645.2',
                    '646.2', '646.3', '692.3', '692.1', '675.1', '675.2', '675.3', '611.3', '652.1', '670.1', '670.2',
                    '670.3', '632.1', '632.2', '632.3', '680.1', '680.2', '680.3', '645.3', '692.2', '684.1', '684.3']
        actual = self.dss.circuit_y_node_order()
        assert actual == expected

    def test_circuit_y_currents(self):
        if platform.architecture()[0] == "64bit":
            expected = [69802.42815021456, -72191.08720767737, -97420.52952591189, -24355.132407117453,
                        27618.101397342507,
                        96546.21962200984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, -13.83538249862238, 10.728150694675776, -8.968242194252298, -3.4169800644837665,
                        -3.1253287196529556, -18.472388556181272, -2.6675923553346195, 3.8325352754590796,
                        -0.46712567880906164, -1.9482821746922383, 3.134718034143681, -1.8842531007668413,
                        -3.314394017111624, -1.3212070720717186, 0.0, -7.105427357601002e-15, 0.0,
                        7.105427357601002e-15,
                        0.25873731736910166, -1.0386532600475462, -0.25873731736910166, 1.0386532600475462,
                        -9.01254899930052, 4.595887907960673, -3.08889789345001, -0.8862753821772227,
                        -1.9605308838638678,
                        -10.932799880696848, 0.028157771758488992, -3.0160456514314262, 0.0, 0.0, 0.06462474225171988,
                        -0.04346468945275905, -1.799018346197947, -0.9604487876225267, -0.05797062518124818,
                        -1.0832442019763846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0,
                        0.0, 0.0, 0.0, 0.0]
            actual = self.dss.circuit_y_currents()
            assert [round(value, 6) for value in actual] == [round(value, 6) for value in expected]
